unit URotImpLote;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtDlgs,
  System.Generics.Collections;

type
  TFRotImpLote = class(TForm)
    MArquivo: TMemo;
    BBImportar: TBitBtn;
    LCaption: TLabel;
    LLayout: TLabel;
    OTFDLer: TOpenTextFileDialog;
    BBLer: TBitBtn;
    EArquivo: TEdit;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure BBLerClick(Sender: TObject);
    procedure BBImportarClick(Sender: TObject);
  private
    { Private declarations }
    procedure ImportaCSV(pNomeArquivo : String);
  public
    { Public declarations }
  end;

var
  FRotImpLote: TFRotImpLote;

implementation

{$R *.dfm}

uses UClaPessoa, UClaLotePessoas;

procedure TFRotImpLote.BBImportarClick(Sender: TObject);
var oPessoa : TPessoa;
    oListaPessoa : TLotePessoas;
begin

  try

  finally


  end;
end;

procedure TFRotImpLote.BBLerClick(Sender: TObject);
begin
  OTFDLer.Execute;
  EArquivo.Text := OTFDLer.FileName;
  ImportaCSV(EArquivo.Text);
end;

procedure TFRotImpLote.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := CaFree;
end;

procedure TFRotImpLote.ImportaCSV(pNomeArquivo : String);
var
  ArquivoCSV: TextFile;
  Contador, i: Integer;
  Linha: String;

  // Lê Linha e Monta os valores
  function MontaValor: String;
  var
    ValorMontado: String;
  begin
    ValorMontado := '';
    inc(I);
    While Linha[i] >= ' ' do
    begin
      If Linha[i] = ';' then
        break;
      ValorMontado := ValorMontado + Linha[I];
      inc(i);
    end;
    result := ValorMontado;
  end;

begin
  AssignFile(ArquivoCSV, pNomeArquivo);
  MArquivo.Lines.Clear;

  try
    Reset(ArquivoCSV);
    Readln(ArquivoCSV, Linha);
    Contador := 1;

    while not Eoln(ArquivoCSV) do
    begin
      i := 0;

      {  A Idéia é importar todas as linhas do Arquivo CSV para um ClientDataSet e
         mandar para o SERVIDOR DATASNAP e lá de controle de transação e em uma Thread operar com performance.
      cds.Append;
      cds.AsString   := MontaValor;
      cds.AsString   := AnsiUpperCase(MontaValor);
      cds.AsFloat    := StrToFloat(MontaValor);
      cds.AsCurrency := StrToCurr(MontaValor);
      cds.Post;
      }
      MArquivo.Lines.Add(Linha);

      Readln(ArquivoCSV, Linha);
      Contador := Contador + 1;
    end;

  finally
    CloseFile(ArquivoCSV);
  end;

end;

end.
